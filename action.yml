name: 'WIPAC Dev Flake8'
description: 'GitHub Action Package for Running Flake8'

inputs:
  max-function-length:
    description: 'The max number of logical lines of code per function'
    required: false
    default: '200'
  max-complexity:
    description: 'The max allowed McCabe complexity value per function (1-5: simple; 6-10: readable; 11-15: harder to read; >15: potentially hard to maintain)'
    required: false
    default: '15'

runs:
  using: "composite"
  steps:
    - run: |
        set -euo pipefail
        echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        pip install --upgrade pip
        pip install flake8
        pip install flake8-max-function-length
      shell: bash
    - run: |
        set -euo pipefail
        echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        echo "Running Flake8..."
        
        FLAKE8_FAILED=false
        
        # Start building Flake8 args
        FLAKE8_ARGS=(".")
        FLAKE8_ARGS+=("--max-function-length=${{ inputs.max-function-length }}")
        FLAKE8_ARGS+=("--max-complexity=${{ inputs.max-complexity }}")
        FLAKE8_ARGS+=("--benchmark")
        FLAKE8_ARGS+=("--verbose")
        
        # Check for a usable Flake8 config file
        if ( [ -f .flake8 ] && grep -q '^\s*\[flake8\]' .flake8 ) || \
           ( [ -f setup.cfg ] && grep -q '^\s*\[flake8\]' setup.cfg ) || \
           ( [ -f tox.ini ] && grep -q '^\s*\[flake8\]' tox.ini ); then
          echo "Flake8 config detected. Using config file..."
        else
          echo "No Flake8 config found. Appending default --ignore list..."
          FLAKE8_ARGS+=("--ignore=E203,E226,E228,E231,E501,W503,W504")
        fi
        
        # run!
        echo "flake8 ${FLAKE8_ARGS[*]}"
        if ! flake8 "${FLAKE8_ARGS[@]}" | tee flake8_output.log; then
          FLAKE8_FAILED=true
        fi
        
        # put in env var to interpret downstream
        echo "FLAKE8_FAILED=$FLAKE8_FAILED" >> "$GITHUB_ENV"
      shell: bash
    - run: |
        set -euo pipefail
        echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        EXIT_WITH=0

        if grep -q "is too complex" flake8_output.log; then
          echo "::error::Complexity issues detected. Refactor or adjust 'max-complexity'."
          EXIT_WITH=1
        fi
        if grep -q "Function too long" flake8_output.log; then
          echo "::error::Function length issues detected. Refactor or adjust 'max-function-length'."
          EXIT_WITH=1
        fi
        # Check the exported FLAKE8_FAILED variable
        if [ "${FLAKE8_FAILED:-false}" = "true" ]; then
          echo "::error::Flake8 found code style errors. Check the output above for details."
          EXIT_WITH=1
        fi

        exit $EXIT_WITH
      shell: bash
